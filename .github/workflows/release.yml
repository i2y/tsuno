name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0

permissions:
  id-token: write  # For trusted publishing to PyPI

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path pyhtransport/Cargo.toml

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux-x86_64
            target: x86_64
            manylinux: auto

          # Linux aarch64
          - os: ubuntu-latest
            platform: linux-aarch64
            target: aarch64
            manylinux: auto

          # macOS Apple Silicon
          - os: macos-14
            platform: macos-aarch64
            target: aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux-aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path pyhtransport/Cargo.toml --interpreter 3.11 3.12 3.13 3.14
          manylinux: ${{ matrix.manylinux }}
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}
          path: dist

  test-wheels:
    name: Test wheels
    needs: [build-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.14"]  # Test oldest and newest only

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Install wheel
        run: |
          pip install --find-links dist tsuno

      - name: Test imports
        run: |
          python -c "import tsuno; import pyhtransport; print('Successfully imported tsuno and pyhtransport')"

      - name: Run basic test
        run: |
          # Test installed package
          python -c "import tsuno; import pyhtransport; print('✓ Package installed successfully')"
          python -c "from tsuno import run, serve; print('✓ Core functions available')"

  publish-pypi:
    name: Publish to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build-sdist, build-wheels, test-wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/tsuno/

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Merge artifacts
        run: |
          mkdir release
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec mv {} release/ \;
          ls -la release/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release/
          attestations: true  # Generate digital attestations
